@include describe("Arrays::Without") {
  @include it("should return a list without values") {
    $list-1: 1, 2, 3, 4, 5, 6;
    $list-2: "a", "b", "c", "b", "x";
    $list-3: true, false, true, true, false;
    $list-4: null, false, null, null;

    @include should(expect( ballistic-without($list-1, (1, 3, 6)  ) ), to( be( (2, 4, 5)          )));
    @include should(expect( ballistic-without($list-2, ("b", "x") ) ), to( be( ("a", "c")         )));
    @include should(expect( ballistic-without($list-3, true       ) ), to( be( (false, false)     )));
    @include should(expect( ballistic-without($list-3, false      ) ), to( be( (true, true, true) )));
    @include should(expect( ballistic-without($list-4, false      ) ), to( be( (null, null, null) )));
  }

  @include it("should return same list when no equaling values") {
    $list-1: 1, 2, 3, 4, 5, 6;
    $list-2: "a", "b", "c", "b", "x";
    $list-3: true, false, true, true, false;
    $list-4: null, false, null, null;

    @include should(expect( ballistic-without($list-1, green) ), to( be( $list-1 )));
    @include should(expect( ballistic-without($list-2, green) ), to( be( $list-2 )));
    @include should(expect( ballistic-without($list-3, green) ), to( be( $list-3 )));
    @include should(expect( ballistic-without($list-4, green) ), to( be( $list-4 )));
  }

  @include it("should return a list without values non-recursively") {
    $list-1: (1, 2, 3, 4), 5, 6;
    $list-2: ("a", "b", "c"), "b", "x", "z";
    $list-3: (false, true, true, false), (true, false, true, false);
    $list-4: (null, false, null), null;

    @include should(expect( ballistic-without($list-1, (1, 3, 6)  ) ), to( be( ((1, 2, 3, 4 ), 5)                                       )));
    @include should(expect( ballistic-without($list-2, ("b", "x") ) ), to( be( (( "a", "b", "c" ), "z")                                 )));
    @include should(expect( ballistic-without($list-3, true       ) ), to( be( ((false, true, true, false), (true, false, true, false)) )));
    @include should(expect( ballistic-without($list-3, false      ) ), to( be( ((false, true, true, false), (true, false, true, false)) )));
    @include should(expect( ballistic-without($list-4, false      ) ), to( be( ((null, false, null), null)                              )));
   }

  @include it("should return a list without values recursively") {
    $list-1: (1, 2, 3, 4), 5, 6;
    $list-2: ("a", "b", "c"), "b", "x", "z";
    $list-3: (false, true, true, false), (true, false, true, false);
    $list-4: (null, false, null), null;

    @include should(expect( ballistic-without($list-1, (1, 3, 6),  $recursive: true ) ), to( be( (( 2, 4 ), 5)                        )));
    @include should(expect( ballistic-without($list-2, ("b", "x"), $recursive: true ) ), to( be( (( "a", "c" ), "z")                  )));
    @include should(expect( ballistic-without($list-3, true,       $recursive: true ) ), to( be( (( false, false ), ( false, false )) )));
    @include should(expect( ballistic-without($list-3, false,      $recursive: true ) ), to( be( (( true, true ), ( true, true ))     )));
    @include should(expect( ballistic-without($list-4, false,      $recursive: true ) ), to( be( (( null, null ), null)               )));
   }

  @include it("should leave empty lists alone") {
    $list: ();

    @include should(expect( ballistic-without($list, green) ), to( be( $list )));
  }
}
