@include describe("Lists ~ Rest") {
  @include it("should return the rest item in an array") {
    $numbers:  1, 2, 3;
    $strings:  "foo", "bar", "baz";
    $booleans: true, false, false;

    @include should(expect( ballistic-rest($numbers ) ), to( be( (2, 3) )));
    @include should(expect( ballistic-rest($strings ) ), to( be( ("bar", "baz") )));
    @include should(expect( ballistic-rest($booleans) ), to( be( (false, false) )));
  }

  @include it("should return the rest nth items in an array") {
    $numbers:  1, 2, 3;
    $strings:  "foo", "bar", "baz";
    $booleans: true, false, false;

    @include should(expect( ballistic-rest($numbers , 2) ), to( be( 3 )));
    @include should(expect( ballistic-rest($strings , 2) ), to( be( "baz" )));
    @include should(expect( ballistic-rest($booleans, 2) ), to( be( false )));
  }

  @include it("should return an empty list when list is too short") {
    $numbers:  1, 2, 3;
    $strings:  "foo", "bar", "baz";
    $booleans: true, false, false;

    @include should(expect( ballistic-rest($numbers , 4) ), to( be-empty()));
    @include should(expect( ballistic-rest($strings , 4) ), to( be-empty()));
    @include should(expect( ballistic-rest($booleans, 4) ), to( be-empty()));
  }

  @include it("should return the only item in an single item array") {
    $number: 1;
    $string: "foo";
    $boolean: true;

    @include should(expect( ballistic-rest($number ) ), to( be( 1 )));
    @include should(expect( ballistic-rest($string ) ), to( be( "foo" )));
    @include should(expect( ballistic-rest($boolean) ), to( be( true )));
  }

  @include it("should return null when a list is empty") {
    $empty: ();

    @include should(expect( ballistic-rest($empty) ), to( be-null() ));
  }
}
