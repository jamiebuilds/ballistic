@include describe("Arrays::Intersection") {
  @include it("should make a union of unique items in the arrays") {
    $list-1a: 1, 2, 3;
    $list-1b: 2, 4, 1;
    $list-1c: 8, 2, 1;

    $list-2a: "foo", "bar", "baz";
    $list-2b: "bar", "nan", "foo";
    $list-2c: "foo", "baz", "bar";

    $list-3a: true,  false, false;
    $list-3b: true,   null, false;
    $list-3c: null,  false,  true;

    @include should(expect( intersection($list-1a, $list-1b, $list-1c) ), to( be( ( 1, 2 ) )));
    @include should(expect( intersection($list-2a, $list-2b, $list-2c) ), to( be( ( "foo", "bar" ) )));
    @include should(expect( intersection($list-3a, $list-3b, $list-3c) ), to( be( ( true, false ) )));
  }

  @include it("should only return unique values") {
    $list-1: 1, 1, 1;
    $list-2: "foo", "foo", "foo";
    $list-3: true, true, true;

    @include should(expect( intersection($list-1, $list-1, $list-1) ), to( be( 1 )));
    @include should(expect( intersection($list-2, $list-2, $list-2) ), to( be( "foo" )));
    @include should(expect( intersection($list-3, $list-3, $list-3) ), to( be( true )));
  }

  @include it("should return one item if all the items are the same") {
    @include should(expect( intersection(1, 1, 1)             ), to( be( 1 )));
    @include should(expect( intersection("foo", "foo", "foo") ), to( be( "foo" )));
    @include should(expect( intersection(false, false, false) ), to( be( false )));
  }

  @include it("should return nothing if all the items are the same except one") {
    @include should(expect( intersection(1, 1, 2)             ), to( be-empty() ));
    @include should(expect( intersection("foo", "foo", "bar") ), to( be-empty() ));
    @include should(expect( intersection(false, false, true)  ), to( be-empty() ));
  }

  @include it("should leave empty arrays alone") {
    @include should(expect( intersection( () )), to( be-empty() ));
    @include should(expect( intersection( () )), to( be-empty() ));
    @include should(expect( intersection( () )), to( be-empty() ));
  }
}
