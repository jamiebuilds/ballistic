@include describe("Numbers::Is-Float") {
  @include it("should be true for floats") {
    @include should(expect( is-float(  0.1  ) ), to( be( true )));
    @include should(expect( is-float( -0.5  ) ), to( be( true )));
    @include should(expect( is-float( 11.2  ) ), to( be( true )));
    @include should(expect( is-float( 1/5   ) ), to( be( true )));
  }

  @include it("should be true for floats with units") {
    @include should(expect( is-float(  0.1em      ) ), to( be( true )));
    @include should(expect( is-float( -0.5px      ) ), to( be( true )));
    @include should(expect( is-float( 11.2in      ) ), to( be( true )));
    @include should(expect( is-float( 1/5ch       ) ), to( be( true )));
  }

  @include it("should be false for non-floats") {
    @include should(expect( is-float( 10    ) ), to( be( false )));
    @include should(expect( is-float( 20    ) ), to( be( false )));
    @include should(expect( is-float(  3    ) ), to( be( false )));
    @include should(expect( is-float( 17    ) ), to( be( false )));
    @include should(expect( is-float( -6    ) ), to( be( false )));
    @include should(expect( is-float( inf() ) ), to( be( false )));
  }

  @include it("should be false for non-numbers") {
    @include should(expect( is-float( false  ) ), to( be( false )));
    @include should(expect( is-float( true   ) ), to( be( false )));
    @include should(expect( is-float( "foo"  ) ), to( be( false )));
    @include should(expect( is-float( null   ) ), to( be( false )));
    @include should(expect( is-float( (1, 2) ) ), to( be( false )));
  }
}
